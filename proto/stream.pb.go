// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoMsg struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoMsg) Reset()         { *m = EchoMsg{} }
func (m *EchoMsg) String() string { return proto.CompactTextString(m) }
func (*EchoMsg) ProtoMessage()    {}
func (*EchoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *EchoMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoMsg.Unmarshal(m, b)
}
func (m *EchoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoMsg.Marshal(b, m, deterministic)
}
func (m *EchoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoMsg.Merge(m, src)
}
func (m *EchoMsg) XXX_Size() int {
	return xxx_messageInfo_EchoMsg.Size(m)
}
func (m *EchoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EchoMsg proto.InternalMessageInfo

func (m *EchoMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMsg)(nil), "proto.EchoMsg")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd2, 0x5c, 0xec,
	0xae, 0xc9, 0x19, 0xf9, 0xbe, 0xc5, 0xe9, 0x42, 0x02, 0x5c, 0xcc, 0xb9, 0xc5, 0xe9, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x51, 0x3c, 0x17, 0x37, 0x48, 0x32, 0x38, 0xb5, 0xa8,
	0x2c, 0x33, 0x39, 0x55, 0x48, 0x9d, 0x8b, 0xd9, 0x3d, 0xb5, 0x44, 0x88, 0x0f, 0x62, 0x82, 0x1e,
	0x54, 0x9f, 0x14, 0x1a, 0xdf, 0x80, 0x11, 0xa4, 0x30, 0x98, 0xb0, 0x42, 0x0d, 0x46, 0x27, 0xf6,
	0x28, 0x88, 0x33, 0x92, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x9e, 0x25,
	0xcd, 0xa4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Streaming responses
	Get(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (EchoService_GetClient, error)
	// Streaming requests
	Set(ctx context.Context, opts ...grpc.CallOption) (EchoService_SetClient, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Get(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (EchoService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoService_serviceDesc.Streams[0], "/proto.EchoService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_GetClient interface {
	Recv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoServiceGetClient struct {
	grpc.ClientStream
}

func (x *echoServiceGetClient) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) Set(ctx context.Context, opts ...grpc.CallOption) (EchoService_SetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoService_serviceDesc.Streams[1], "/proto.EchoService/Set", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceSetClient{stream}
	return x, nil
}

type EchoService_SetClient interface {
	Send(*EchoMsg) error
	CloseAndRecv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoServiceSetClient struct {
	grpc.ClientStream
}

func (x *echoServiceSetClient) Send(m *EchoMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceSetClient) CloseAndRecv() (*EchoMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	// Streaming responses
	Get(*EchoMsg, EchoService_GetServer) error
	// Streaming requests
	Set(EchoService_SetServer) error
}

// UnimplementedEchoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (*UnimplementedEchoServiceServer) Get(req *EchoMsg, srv EchoService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedEchoServiceServer) Set(srv EchoService_SetServer) error {
	return status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).Get(m, &echoServiceGetServer{stream})
}

type EchoService_GetServer interface {
	Send(*EchoMsg) error
	grpc.ServerStream
}

type echoServiceGetServer struct {
	grpc.ServerStream
}

func (x *echoServiceGetServer) Send(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_Set_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).Set(&echoServiceSetServer{stream})
}

type EchoService_SetServer interface {
	SendAndClose(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ServerStream
}

type echoServiceSetServer struct {
	grpc.ServerStream
}

func (x *echoServiceSetServer) SendAndClose(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceSetServer) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _EchoService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Set",
			Handler:       _EchoService_Set_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
